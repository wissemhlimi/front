{"version":3,"file":"static/js/8835.a80d9a18.chunk.js","mappings":"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","sources":["../../src/yup.ts","../node_modules/react-hook-form/src/utils/isHTMLElement.ts","../node_modules/react-hook-form/src/constants.ts","../node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","../node_modules/react-hook-form/src/utils/isObject.ts","../node_modules/react-hook-form/src/utils/isKey.ts","../node_modules/react-hook-form/src/utils/compact.ts","../node_modules/react-hook-form/src/utils/stringToPath.ts","../node_modules/react-hook-form/src/utils/set.ts","../node_modules/react-hook-form/src/logic/transformToNestObject.ts","../node_modules/react-hook-form/src/utils/isUndefined.ts","../node_modules/react-hook-form/src/utils/get.ts","../node_modules/react-hook-form/src/logic/focusOnErrorField.ts","../node_modules/react-hook-form/src/logic/removeAllEventListeners.ts","../node_modules/react-hook-form/src/logic/getRadioValue.ts","../node_modules/react-hook-form/src/logic/getMultipleSelectValue.ts","../node_modules/react-hook-form/src/utils/isRadioInput.ts","../node_modules/react-hook-form/src/utils/isFileInput.ts","../node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","../node_modules/react-hook-form/src/utils/isMultipleSelect.ts","../node_modules/react-hook-form/src/logic/getCheckboxValue.ts","../node_modules/react-hook-form/src/logic/getFieldValue.ts","../node_modules/react-hook-form/src/utils/isDetached.ts","../node_modules/react-hook-form/src/utils/isEmptyObject.ts","../node_modules/react-hook-form/src/utils/isBoolean.ts","../node_modules/react-hook-form/src/utils/unset.ts","../node_modules/react-hook-form/src/logic/findRemovedFieldAndRemoveListener.ts","../node_modules/react-hook-form/src/utils/isPrimitive.ts","../node_modules/react-hook-form/src/utils/deepMerge.ts","../node_modules/react-hook-form/src/logic/setFieldArrayDirtyFields.ts","../node_modules/react-hook-form/src/utils/isString.ts","../node_modules/react-hook-form/src/logic/getFieldsValues.ts","../node_modules/react-hook-form/src/utils/deepEqual.ts","../node_modules/react-hook-form/src/logic/isErrorStateChanged.ts","../node_modules/react-hook-form/src/utils/isRegex.ts","../node_modules/react-hook-form/src/logic/getValueAndMessage.ts","../node_modules/react-hook-form/src/utils/isFunction.ts","../node_modules/react-hook-form/src/utils/isMessage.ts","../node_modules/react-hook-form/src/logic/getValidateError.ts","../node_modules/react-hook-form/src/logic/appendErrors.ts","../node_modules/react-hook-form/src/logic/validateField.ts","../node_modules/react-hook-form/src/utils/getPath.ts","../node_modules/react-hook-form/src/logic/assignWatchFields.ts","../node_modules/react-hook-form/src/logic/skipValidation.ts","../node_modules/react-hook-form/src/logic/getNodeParentName.ts","../node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","../node_modules/react-hook-form/src/utils/isSelectInput.ts","../node_modules/react-hook-form/src/utils/isWeb.ts","../node_modules/react-hook-form/src/utils/cloneObject.ts","../node_modules/react-hook-form/src/utils/validationModeChecker.ts","../node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","../node_modules/react-hook-form/src/useForm.ts","../node_modules/react-hook-form/src/logic/attachEventListeners.ts","../node_modules/react-hook-form/src/utils/onDomRemove.ts","../node_modules/react-hook-form/src/useFormContext.tsx"],"sourcesContent":[null,"export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: string) => /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n      valueAsNumber,\n      valueAsDate,\n      setValueAs,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return valueAsNumber\n      ? +value\n      : valueAsDate\n      ? (ref as HTMLInputElement).valueAsDate\n      : setValueAs\n      ? setValueAs(value)\n      : value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!ref.type || !fieldRef) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if (isRadioInput(ref) || isCheckBoxInput(ref)) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option = {}, index): void => {\n        if (\n          (isDetached(option.ref) && isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields),\n    setDirtyFields(defaultValues, values, dirtyFields),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import * as React from 'react';\nimport isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean => {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import * as React from 'react';\nimport isString from '../utils/isString';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== '') {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(value)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\nimport { FieldName } from '../types';\n\nexport const getPath = <TFieldValues>(\n  rootPath: FieldName<TFieldValues>,\n  values: any,\n  paths: FieldName<TFieldValues>[] = [],\n): FieldName<TFieldValues>[] => {\n  for (const property in values) {\n    const rootName = (rootPath +\n      (isObject(values)\n        ? `.${property}`\n        : `[${property}]`)) as FieldName<TFieldValues>;\n\n    isPrimitive(values[property])\n      ? paths.push(rootName)\n      : getPath(rootName, values[property], paths);\n  }\n\n  return paths;\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value = undefined;\n\n  watchFields.add(fieldName);\n\n  if (!isEmptyObject(fieldValues)) {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED && typeof document !== UNDEFINED;\n","import isPrimitive from './isPrimitive';\nimport isHTMLElement from './isHTMLElement';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n\n  if (\n    isPrimitive(data) ||\n    (isWeb && (data instanceof File || isHTMLElement(data)))\n  ) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key)));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key]);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isWeb from './utils/isWeb';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  RegisterOptions,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n  FieldArrayDefaultValues,\n  ResetFieldArrayFunctionRef,\n  UseWatchRenderFunctions,\n  RecordInternalNameSet,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const fieldArrayValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<RecordInternalNameSet<TFieldValues>>(\n    {},\n  );\n  const useWatchRenderFunctionsRef = React.useRef<UseWatchRenderFunctions>({});\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    ResetFieldArrayFunctionRef<TFieldValues>\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isValidating: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) => {\n      if (!isUnMount.current) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        setFormState(formStateRef.current);\n      }\n    },\n    [],\n  );\n\n  const updateIsValidating = () =>\n    readFormStateRef.current.isValidating &&\n    updateFormState({\n      isValidating: true,\n    });\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        readFormStateRef.current.isValidating\n      ) {\n        updateFormState({\n          ...state,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n          isValidating: false,\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (name: FieldName<TFieldValues>, rawValue: SetFieldValue<TFieldValues>) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(formValues, defaultValuesRef.current);\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touched'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && updateFormState(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          isValidating: false,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      updateIsValidating();\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState({\n          isValidating: false,\n        });\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !shouldUnregister &&\n        !isPrimitive(value) &&\n        set(shallowFieldsStateRef.current, name, { ...value });\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          const parentName = getNodeParentName(name) || name;\n          set(fieldArrayDefaultValuesRef.current, name, value);\n\n          resetFieldArrayFunctionRef.current[parentName]({\n            [parentName]: get(fieldArrayDefaultValuesRef.current, parentName),\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<TFieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n  ): boolean => {\n    let found = true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender =\n            !isEmptyObject(state) ||\n            (!isBlurEvent && isFieldWatched(name as FieldName<TFieldValues>));\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            !isBlurEvent && renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          updateIsValidating();\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          !isBlurEvent && renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            isDirty: isFormDirty(),\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            !fieldArrayValue.length ||\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(get(defaultValuesRef.current, fieldNames))\n            ? defaultValue\n            : get(defaultValuesRef.current, fieldNames),\n          true,\n        );\n      }\n\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    options: RegisterOptions | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...options,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...options,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...options,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name as FieldName<TFieldValues>, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(options)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          previousFormIsValid !== isEmptyObject(error) && updateFormState();\n        });\n      }\n    }\n\n    if (!(isFieldArray && isEmptyDefaultValue)) {\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    options?: RegisterOptions,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    options?: RegisterOptions,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrRegisterOptions?:\n      | FieldName<TFieldValues>\n      | RegisterOptions\n      | (TFieldElement & Ref)\n      | null,\n    options?: RegisterOptions,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrRegisterOptions)) {\n        registerFieldRef({ name: refOrRegisterOptions }, options);\n      } else if (\n        isObject(refOrRegisterOptions) &&\n        'name' in refOrRegisterOptions\n      ) {\n        registerFieldRef(refOrRegisterOptions, options);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrRegisterOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const { name } = field.ref;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: DefaultValues<TFieldValues>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = { ...(values || defaultValuesRef.current) };\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values || defaultValuesRef.current);\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      observerRef.current && observerRef.current.disconnect();\n      isUnMount.current = true;\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n"],"names":["parseErrorSchema","error","validateAllFieldCriteria","Array","isArray","inner","length","reduce","previous","path","message","type","previousTypes","types","key","Object","concat","yupResolver","schema","options","abortEarly","values","context","validate","errors","parsedErrors","transformToNestObject","value","HTMLElement","EVENTS","BLUR","CHANGE","INPUT","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","isObjectType","isNullOrUndefined","Date","test","filter","Boolean","input","compact","replace","split","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isObject","isNaN","data","val","undefined","obj","defaultValue","result","isUndefined","fields","fieldErrors","get","field","ref","focus","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","option","checked","selected","map","element","defaultResult","validResult","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","valueAsNumber","valueAsDate","setValueAs","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","getMultipleSelectValue","isCheckBox","getCheckboxValue","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","deepMerge","target","source","isPrimitive","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentName","shallowFieldsState","shouldUnregister","search","output","isString","startsWith","find","deepEqual","object1","object2","isErrorObject","React.isValidElement","keys1","keys2","val1","val2","validFields","fieldsWithValidation","previousError","RegExp","validationData","isRegex","getValidateError","isMessage","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","getPath","rootPath","paths","property","rootName","push","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","isMatchFieldArrayName","searchName","names","some","window","document","cloneObject","copy","isWeb","File","getTime","Set","Map","mode","isOnSubmit","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","modeChecker","isValidateAllFieldCriteria","React.useState","isDirty","isValidating","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","updateIsValidating","shouldRenderBaseOnError","shouldRender","shouldReRender","isErrorStateChanged","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","getNodeParentName","setFieldArrayDirtyFields","isFieldWatched","match","renderWatchedInputs","found","size","setFieldArrayDefaultValues","payload","getFieldsValues","shouldSkipValidation","skipValidation","parentNodeName","currentError","validateResolver","removeFieldEventListener","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","updateWatchedValue","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","fieldArrayValue","assignWatchFields","combinedDefaultValues","registerFieldRef","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","isFieldArray","isNameInFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","isSelectInput","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","focusOnErrorField","resetRefs","React.useEffect","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","setValue","register","refOrRegisterOptions","unregister","prop","control","React.useMemo","watch","reset","omitResetState","inputRef","closest","resetFieldArray","clearErrors","inputName","setError","shouldFocus","FormContext","React.createContext","displayName","useFormContext","React.useContext","FormProvider","_a","children","props","__rest","React.createElement","Provider"],"sourceRoot":""}