{"version":3,"file":"static/js/405.a6834818.chunk.js","mappings":"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","sources":["modules/Search/SearchService.tsx","view/Search/SRPCard.tsx","view/Search/SearchContext.tsx","view/Search/SRP/SRPTable.tsx","view/Search/SRP/SearchResults.tsx","view/Search/Search.tsx"],"sourcesContent":["import authAxios from \"src/modules/shared/axios/authAxios\";\r\nimport AuthCurrentTenant from \"src/modules/auth/authCurrentTenant\";\r\n\r\nexport default class SearchService {\r\n  // GET CATEGORIES LIST FOR PUBLICATIONS\r\n  static async getCategoriesList() {\r\n    const tenantId = AuthCurrentTenant.get();\r\n    const response = await authAxios.get(\r\n      `/tenant/${tenantId}/category-publication`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  static async getSearchResultsForPublicationsBasedOnSearchString(\r\n    SEARCH_STRING,\r\n    OFFSET\r\n  ) {\r\n    const tenantId = AuthCurrentTenant.get();\r\n    const response = await authAxios.get(\r\n      `/tenant/${tenantId}/search?filter=${SEARCH_STRING}&limit=10&offset=${OFFSET}&validated={true}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  // SAERCH BASED ON CATEGORIES (REVERSE LOGIC)\r\n  static async searchUsingMainCatefories(SEARCH_STRING, categoryName, OFFSET) {\r\n    const tenantId = AuthCurrentTenant.get();\r\n    const response = await authAxios.get(\r\n      `/tenant/${tenantId}/category-publication?filter[titleFR]=${categoryName}`\r\n    );\r\n    const publicationsOfSelectedCategory = response.data.rows[0]?.publications;\r\n    const finalResponseOBject = {\r\n      rows: publicationsOfSelectedCategory ?? [],\r\n      count: publicationsOfSelectedCategory?.length ?? 0,\r\n    };\r\n    return finalResponseOBject;\r\n  }\r\n\r\n  // ARCHIVE SEARCH\r\n  static async getSearchResultsForArchiveBasedOnSearchString(\r\n    SEARCH_STRING,\r\n    FILTER_STRING,\r\n    OFFSET\r\n  ) {\r\n    const tenantId = AuthCurrentTenant.get();\r\n    const response = await authAxios.get(\r\n      `/tenant/${tenantId}/publication?filter[descriptionFR]=${SEARCH_STRING}&limit=5&offset=${OFFSET}&filter[statut]=archive${FILTER_STRING}`\r\n    );\r\n    return response.data;\r\n  }\r\n\r\n  static async getArchivePublications(SEARCH_STRING, FILTER, OFFSET) {\r\n    const tenantId = AuthCurrentTenant.get();\r\n    const response = await authAxios.get(\r\n      `/tenant/${tenantId}/publication/search?filter=${SEARCH_STRING}&limit=10&offset=${OFFSET}&advanced[statut]=${FILTER.statut}&advanced[thematique]=${FILTER.thematique}&advanced[category]=${FILTER.category}`\r\n    );\r\n    return response.data;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport parse from \"html-react-parser\";\r\nimport moment from \"moment\";\r\nimport { calendar, noData } from \"src/assets/images\";\r\nexport default function SRPCard({\r\n  _id,\r\n  date,\r\n  content,\r\n  thumbnail,\r\n  title,\r\n  entite,\r\n  type,\r\n}) {\r\n  const formattedDate = moment(date).format(\"l\");\r\n  return (\r\n    <CardLayout>\r\n      <Link to={\"/\" + entite + \"/\" + _id}>\r\n        <div className=\"search__description\">\r\n          <div>\r\n            <div className=\"evenement__left\">\r\n              {thumbnail ? (\r\n                <img\r\n                  className=\"lazyload\"\r\n                  style={{ width: 100, height: 100 }}\r\n                  src={thumbnail}\r\n                  alt=\"\"\r\n                />\r\n              ) : (\r\n                <img\r\n                  className=\"lazyload\"\r\n                  style={{ width: 100, height: 100 }}\r\n                  src={noData}\r\n                  alt=\"\"\r\n                />\r\n              )}\r\n            </div>\r\n            <div className=\"evenement__right\">\r\n              <div className=\"date\">\r\n                <div>\r\n                  <img className=\"lazyload\" src={calendar} alt=\"\" srcSet=\"\" />\r\n                  {formattedDate}\r\n                </div>\r\n                {type ? (\r\n                  <div className=\"cardHeader\">\r\n                    <span className=\"categoryBadge\">{type}</span>\r\n                  </div>\r\n                ) : null}\r\n              </div>\r\n              {title ? (\r\n                <div className=\"title\">\r\n                  {title.length > 100\r\n                    ? parse(title.substring(0, 100) + \"...\")\r\n                    : parse(title)}\r\n                </div>\r\n              ) : null}\r\n              {content ? (\r\n                <div className=\"right__footer\">\r\n                  {content.length > 100\r\n                    ? parse(content.substring(0, 100) + \"...\")\r\n                    : parse(content)}\r\n                </div>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n      <hr></hr>\r\n    </CardLayout>\r\n  );\r\n}\r\n\r\nconst CardLayout = styled.div`\r\n  /* LEFT SECTION */\r\n  hr {\r\n    height: 1px;\r\n    background-color: #2b2840;\r\n    border: none;\r\n  }\r\n  .cardContent {\r\n    flex-grow: 1;\r\n    height: 100%;\r\n    padding-left: 1rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n\r\n    .cardHeader {\r\n      width: 100%;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      font-size: 12px;\r\n      font-family: \"Proxima Nova\";\r\n\r\n      .categoryBadge {\r\n        background: #f8d7da;\r\n        border-radius: 3px;\r\n        color: var(--dark--red);\r\n        padding: 0.4rem 0.5rem;\r\n        font-size: 12px;\r\n        font-family: \"Proxima Nova\";\r\n      }\r\n    }\r\n\r\n    .title {\r\n      margin-top: 1.5rem;\r\n      color: var(--violet);\r\n\r\n      span {\r\n        font-family: \"Bebas Neue Pro\";\r\n        font-style: normal;\r\n        font-weight: 700;\r\n        font-size: 23px;\r\n        line-height: 24px;\r\n      }\r\n    }\r\n  }\r\n  hr {\r\n    margin-top: 10px;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n","import { createContext } from \"react\";\r\n\r\nexport const SearchContext = createContext<any>(null);\r\n","import React, { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Skeleton from \"react-loading-skeleton\";\r\nimport { SearchContext } from \"../SearchContext\";\r\n// COMPONENTS\r\nimport SRPCard from \"../SRPCard\";\r\n// ICONS\r\nimport { BsBox } from \"react-icons/bs\";\r\nimport Breadcrumb from \"src/view/shared/Breadcrumb\";\r\nimport { i18n } from \"src/i18n\";\r\nimport { Tabs } from \"antd\";\r\nimport { baseUrl } from \"../../shared/BaseUrl\";\r\n\r\nexport default function SRPTable({ currentPostsToShow }) {\r\n  // GLOBAL STATE\r\n  const { TabPane } = Tabs;\r\n\r\n  const { isLoading } = useContext(SearchContext);\r\n  const langue = localStorage.getItem(\"language\");\r\n  // HELPER FUNCTION\r\n  const getValidThumbnail = (attachmentsArray) => {\r\n    const acceptableExtions = \"png, jpg, jpeg, gif\";\r\n    let fakeUrl = \"https://via.placeholder.com/270x175\";\r\n    attachmentsArray.forEach((att) => {\r\n      if (att.downloadUrl)\r\n        if (att.downloadUrl.length >= 1) {\r\n          const urlExtension = att.downloadUrl.substring(\r\n            att.downloadUrl.lastIndexOf(\".\") + 1,\r\n            att.downloadUrl.length\r\n          );\r\n          if (acceptableExtions.includes(urlExtension)) {\r\n            fakeUrl = att.downloadUrl;\r\n          }\r\n        }\r\n    });\r\n    return fakeUrl;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <SRPDataLayout>\r\n        {\r\n          // ONCE LOADING IS DONE\r\n          isLoading === true ? (\r\n            <section>\r\n              <Skeleton height={170} />\r\n            </section>\r\n          ) : (\r\n            <section>\r\n              {currentPostsToShow.count > 0 ? (\r\n                <section>\r\n                  <Tabs\r\n                    className=\"links\"\r\n                    defaultActiveKey={\r\n                      currentPostsToShow.rows.rowsEvent.length > 0\r\n                        ? \"0\"\r\n                        : currentPostsToShow.rows.rowsPublication.length > 0\r\n                        ? \"1\"\r\n                        : currentPostsToShow.rows.rowsGlosaire.length > 0\r\n                        ? \"2\"\r\n                        : \"3\"\r\n                    }\r\n                    onChange={(key: string) => {}}\r\n                  >\r\n                    <TabPane\r\n                      className=\"\"\r\n                      tab={i18n(\"menu.Evènements\")}\r\n                      key=\"0\"\r\n                      disabled={currentPostsToShow.rows.rowsEvent.length <= 0}\r\n                    >\r\n                      <>\r\n                        {currentPostsToShow.rows.rowsEvent.map(\r\n                          (searchResult, index) => {\r\n                            let thumbnail: any;\r\n                            if (searchResult.photos.length >= 1) {\r\n                              thumbnail = getValidThumbnail(\r\n                                searchResult.photos\r\n                              );\r\n                            }\r\n                            if (langue === \"fr\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleFR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleFR\"]}\r\n                                  entite={\"Evenements\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"date\"]}\r\n                                  content={searchResult[\"descriptionFR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"ar\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleAR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleAR\"]}\r\n                                  entite={\"Evenements\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"date\"]}\r\n                                  content={searchResult[\"descriptionAR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"en\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleEN\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleEN\"]}\r\n                                  entite={\"Evenements\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"date\"]}\r\n                                  content={searchResult[\"descriptionEN\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            }\r\n                          }\r\n                        )}\r\n                      </>\r\n                    </TabPane>\r\n                    <TabPane\r\n                      tab={i18n(\"menu.Publications\")}\r\n                      key=\"1\"\r\n                      disabled={\r\n                        currentPostsToShow.rows.rowsPublication.length <= 0\r\n                      }\r\n                    >\r\n                      <>\r\n                        {currentPostsToShow.rows.rowsPublication.map(\r\n                          (searchResult, index) => {\r\n                            console.log(\"searchResult\", searchResult);\r\n                            let thumbnail =\r\n                              searchResult.photos.length > 0\r\n                                ? `${baseUrl}/file/download?privateUrl=${searchResult.photos[0].privateUrl}`\r\n                                : \"\";\r\n\r\n                            if (langue === \"fr\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleFR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleFR\"]}\r\n                                  entite={\"detail\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"date\"]}\r\n                                  content={searchResult[\"descriptionFR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"ar\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleAR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleAR\"]}\r\n                                  entite={\"detail\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"date\"]}\r\n                                  content={searchResult[\"descriptionAR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"en\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"category\"]\r\n                                      ? searchResult[\"category\"][\"titleEN\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"titleEN\"]}\r\n                                  entite={\"detail\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"date\"]}\r\n                                  content={searchResult[\"descriptionEN\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            }\r\n                          }\r\n                        )}\r\n                      </>\r\n                    </TabPane>\r\n                    <TabPane\r\n                      tab={i18n(\"menu.Glossaire\")}\r\n                      key=\"2\"\r\n                      disabled={\r\n                        currentPostsToShow.rows.rowsGlosaire.length <= 0\r\n                      }\r\n                    >\r\n                      <>\r\n                        {currentPostsToShow.rows.rowsGlosaire.map(\r\n                          (searchResult, index) => {\r\n                            if (langue === \"fr\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"categorie\"]\r\n                                      ? searchResult[\"categorie\"][\"titleFR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"nomFR\"]}\r\n                                  entite={\"Glossaire\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"definitionFR\"]}\r\n                                  thumbnail={\"\"}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"ar\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"categorie\"]\r\n                                      ? searchResult[\"categorie\"][\"titleAR\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"nomAR\"]}\r\n                                  entite={\"Glossaire\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"definitionAR\"]}\r\n                                  thumbnail={\"\"}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"en\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={\r\n                                    searchResult[\"categorie\"]\r\n                                      ? searchResult[\"categorie\"][\"titleEN\"]\r\n                                      : null\r\n                                  }\r\n                                  title={searchResult[\"nomEN\"]}\r\n                                  entite={\"Glossaire\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"definitionEN\"]}\r\n                                  thumbnail={\"\"}\r\n                                />\r\n                              );\r\n                            }\r\n                          }\r\n                        )}\r\n                      </>\r\n                    </TabPane>\r\n                    <TabPane\r\n                      tab={i18n(\"menu.Médiathèque\")}\r\n                      key=\"3\"\r\n                      disabled={\r\n                        currentPostsToShow.rows.rowsMediatheque.length <= 0\r\n                      }\r\n                    >\r\n                      <>\r\n                        {currentPostsToShow.rows.rowsMediatheque.map(\r\n                          (searchResult, index) => {\r\n                            let thumbnail: any;\r\n                            if (searchResult.photos.length >= 1) {\r\n                              thumbnail = getValidThumbnail(\r\n                                searchResult.photos\r\n                              );\r\n                            }\r\n\r\n                            if (langue === \"fr\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={searchResult[\"type\"]}\r\n                                  title={searchResult[\"titleFR\"]}\r\n                                  entite={\"Mediatheque/entity\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionFR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"ar\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={searchResult[\"type\"]}\r\n                                  title={searchResult[\"titleAR\"]}\r\n                                  entite={\"Mediatheque/entity\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionAR\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            } else if (langue === \"en\") {\r\n                              return (\r\n                                <SRPCard\r\n                                  type={searchResult[\"type\"]}\r\n                                  title={searchResult[\"titleEN\"]}\r\n                                  entite={\"Mediatheque/entity\"}\r\n                                  key={index}\r\n                                  _id={searchResult[\"_id\"] ?? 0}\r\n                                  date={searchResult[\"updatedAt\"]}\r\n                                  content={searchResult[\"descriptionEN\"]}\r\n                                  thumbnail={thumbnail}\r\n                                />\r\n                              );\r\n                            }\r\n                          }\r\n                        )}\r\n                      </>\r\n                    </TabPane>\r\n                  </Tabs>\r\n                </section>\r\n              ) : (\r\n                <h3 id=\"noDataFound\">\r\n                  <BsBox />\r\n                  &nbsp;{i18n(\"common.noData\")}\r\n                </h3>\r\n              )}\r\n            </section>\r\n          )\r\n        }\r\n      </SRPDataLayout>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst SRPDataLayout = styled.div`\r\n  width: 100%;\r\n  margin: 1rem 0;\r\n\r\n  #noDataFound {\r\n    font-family: \"Proxima Nova\";\r\n    font-style: normal;\r\n    font-weight: 100;\r\n    font-size: 1.5rem;\r\n    text-align: center;\r\n    color: #c7c6c6;\r\n\r\n    width: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SearchService from \"src/modules/Search/SearchService\";\r\nimport { SearchContext } from \"../SearchContext\";\r\n\r\n// COMPONENTS\r\nimport SRPTable from \"./SRPTable\";\r\nimport SRPFooter from \"./SRPFooter\";\r\nimport \"react-loading-skeleton/dist/skeleton.css\";\r\nimport { i18n } from \"src/i18n\";\r\nimport Breadcrumb from \"src/view/shared/Breadcrumb\";\r\n\r\nexport default function SearchResults({ location }) {\r\n\t// GLOBAL STATE\r\n\tconst { setIsLoading, SRP, setSRP, searchString, setcurrentPageIndex } =\r\n\t\tuseContext(SearchContext);\r\n\r\n\tconst searchPublications = (SEARCH_STRING: string) => {\r\n\t\tsetIsLoading(true);\r\n\t\tSearchService.getSearchResultsForPublicationsBasedOnSearchString(\r\n\t\t\tSEARCH_STRING,\r\n\t\t\t0,\r\n\t\t).then((res) => {\r\n\t\t\tsetcurrentPageIndex(0);\r\n\t\t\tsetSRP(res);\r\n\t\t\tsetIsLoading(false);\r\n\t\t});\r\n\t};\r\n\t// HANDLING SUB FILTER (date / name)\r\n\t// const handleSubFilter = (event) => {\r\n\t//   setIsLoading(true);\r\n\t//   setSRP([]);\r\n\t//   const FILTER_STRING = `&orderBy=[${event.target.value}]`;\r\n\t//   // redo the search using chosen option\r\n\t//   SearchService.getSearchResultsForPublicationsBasedOnSearchString(\r\n\t//     searchString,\r\n\t//     0\r\n\t//   )\r\n\t//     .then((res) => {\r\n\t//       setSRP((SRP) => SRP.concat(res));\r\n\t//       setIsLoading(false);\r\n\t//     })\r\n\t//     .catch((err) => {\r\n\t//       console.error(err);\r\n\t//     });\r\n\t// };\r\n\tuseEffect(() => {\r\n\t\tsearchPublications(location.HOME_SEARCH_STRING);\r\n\t}, []);\r\n\tlet currentPostsToShow: any[] = [];\r\n\tif (SRP.length >= 1)\r\n\t\tif (SRP[0].rows.length >= 1) currentPostsToShow = SRP[0].rows;\r\n\r\n\treturn (\r\n\t\t<SRPLayout>\r\n\t\t\t{/* SUB FILTER AND SRP METADA */}\r\n\t\t\t{/* <SRPHeader>\r\n        {SRP.length >= 1 && (\r\n          <>\r\n            <div>\r\n              <strong>{SRP[0].count}</strong>\r\n              <span>résultat pour cette recherche</span>\r\n            </div>\r\n            <div id='filterContainer'>\r\n              <span>Trier par</span>\r\n              <select\r\n                name='filterBy'\r\n                id='filterBySelect'\r\n                onChange={handleSubFilter}>\r\n                <option value=''>--</option>\r\n                <option value='createdAt_DESC'>Date ( Desc )</option>\r\n                <option value='createdAt_ASC'>Date ( Asc )</option>\r\n                <option value='az'>Name A-Z</option>\r\n                <option value='za'>Name Z-A</option>\r\n              </select>\r\n            </div>\r\n          </>\r\n        )}\r\n      </SRPHeader> */}\r\n\r\n\t\t\t{/* RESULT CONTENT DISPLAYED IN ARRAY FORMAT */}\r\n\t\t\t<SRPTable currentPostsToShow={SRP} />\r\n\r\n\t\t\t{/* FOOTER WITH PAGINATION ENABLED */}\r\n\t\t\t{/* <SRPFooter totalPosts={SRP.length >= 1 ? SRP[0].count : 0} /> */}\r\n\t\t</SRPLayout>\r\n\t);\r\n}\r\n\r\nconst SRPLayout = styled.div`\r\n\tmargin-top: 1rem;\r\n`;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { SearchContext } from \"./SearchContext\";\r\nimport styled from \"styled-components\";\r\n\r\n// COMPONENTS\r\n\r\nimport SearchResults from \"./SRP/SearchResults\";\r\n// OTHER\r\n\r\nexport default function Search({ location }) {\r\n  // GLOBAL STATE\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [searchString, setSearchString] = useState(location.HOME_SEARCH_STRING);\r\n  const [SRP, setSRP] = useState([]);\r\n  const [publicationFilter, setpublicationFilter] = useState(\"autre\");\r\n  // PAGINATION LOGIC\r\n  const [currentPageIndex, setcurrentPageIndex] = useState(0);\r\n  const [numberOfPostsPerPage, setnumberOfPostsPerPage] = useState(5);\r\n\r\n  return (\r\n    <SearchContext.Provider\r\n      value={{\r\n        isLoading,\r\n        setIsLoading,\r\n        SRP,\r\n        setSRP,\r\n        searchString,\r\n        setSearchString,\r\n        publicationFilter,\r\n        setpublicationFilter,\r\n        currentPageIndex,\r\n        setcurrentPageIndex,\r\n        numberOfPostsPerPage,\r\n        setnumberOfPostsPerPage,\r\n      }}\r\n    >\r\n      <SearchLayout>\r\n        <section className=\"wideContent\">\r\n          <SearchResults location={location} />\r\n        </section>\r\n      </SearchLayout>\r\n    </SearchContext.Provider>\r\n  );\r\n}\r\n\r\nconst SearchLayout = styled.section`\r\n  max-width: 1170px;\r\n  margin: auto;\r\n\r\n  @media (max-width: 1071px) {\r\n    margin: 150px 0 0 0;\r\n  }\r\n  .wideContent {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n  }\r\n`;\r\n"],"names":["SearchService","tenantId","AuthCurrentTenant","authAxios","response","data","SEARCH_STRING","OFFSET","categoryName","publicationsOfSelectedCategory","rows","publications","finalResponseOBject","count","length","FILTER_STRING","FILTER","statut","thematique","category","SRPCard","_id","date","content","thumbnail","title","entite","type","formattedDate","moment","format","CardLayout","to","className","style","width","height","src","alt","noData","calendar","srcSet","parse","substring","styled","SearchContext","createContext","SRPTable","currentPostsToShow","TabPane","Tabs","isLoading","useContext","langue","localStorage","getItem","getValidThumbnail","attachmentsArray","fakeUrl","forEach","att","downloadUrl","urlExtension","lastIndexOf","includes","SRPDataLayout","defaultActiveKey","rowsEvent","rowsPublication","rowsGlosaire","onChange","key","tab","i18n","disabled","map","searchResult","index","photos","console","log","baseUrl","privateUrl","rowsMediatheque","id","SearchResults","location","setIsLoading","SRP","setSRP","setcurrentPageIndex","searchString","useEffect","HOME_SEARCH_STRING","then","res","SRPLayout","Search","useState","setSearchString","publicationFilter","setpublicationFilter","currentPageIndex","numberOfPostsPerPage","setnumberOfPostsPerPage","Provider","value","SearchLayout"],"sourceRoot":""}